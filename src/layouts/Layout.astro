---
import Navigation from '../components/Navigation.astro';
import '../styles/global.css';

interface Props {
  title: string;
  description: string;
  currentPath?: string;
}

const { title, description, currentPath = "/" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content="Maryam Akhyani" />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Inter:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <Navigation currentPath={currentPath} />

    <main>
      <slot />
    </main>

    <footer>
      <p>&copy; 2025 Maryam Akhyani. All Rights Reserved.</p>
    </footer>

    <script>
      // Initialize Vercel Analytics
      import('@vercel/analytics').then(({ inject }) => {
        inject();
      });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const sections = document.querySelectorAll("section, header");
        const navLinks = document.querySelectorAll(".side-nav a, .bottom-nav a");
        const sideNav = document.querySelector(".side-nav");
        const bottomNav = document.querySelector(".bottom-nav");
        const darkModeToggles = document.querySelectorAll(".dark-mode-toggle");
        const body = document.body;
        const header = document.getElementById("home");

        // --- Dark Mode Logic ---
        darkModeToggles.forEach((toggle) => {
          toggle.addEventListener("click", () => {
            body.classList.toggle("dark-mode");
          });
        });

        // --- Navigation Logic ---
        const onScroll = () => {
          // Nav link highlighting
          let currentSectionId = "";
          sections.forEach((section) => {
            const htmlSection = section as HTMLElement;
            const sectionTop = htmlSection.offsetTop;
            if (window.scrollY >= sectionTop - 150) {
              const sectionId = section.getAttribute("id");
              if (sectionId) {
                currentSectionId = sectionId;
              }
            }
          });

          navLinks.forEach((link) => {
            link.classList.remove("active");
            if (link.getAttribute("href") === `#${currentSectionId}`) {
              link.classList.add("active");
            }
          });

          // Side nav visibility on scroll
          if (sideNav) {
            if (window.scrollY > 50) {
              sideNav.classList.add("scrolled");
            } else {
              sideNav.classList.remove("scrolled");
            }
          }

          // Bottom nav scroll state management
          if (bottomNav) {
            if (window.scrollY > 50) {
              bottomNav.classList.add("scrolled");
            } else {
              bottomNav.classList.remove("scrolled");
            }
          }

          // Squeeze to logo effect (only on homepage)
          if (header) {
            if (window.scrollY > header.offsetHeight * 0.5) {
              body.classList.add("scrolled-past");
            } else {
              body.classList.remove("scrolled-past");
            }

            // Logo color transition based on scroll position
            if (window.scrollY > header.offsetHeight * 0.8) {
              body.classList.add("scrolled-further");
            } else {
              body.classList.remove("scrolled-further");
            }
          }
        };

        // Set the first link as active by default
        const firstLink = document.querySelector(
          '.side-nav a[href="/"], .bottom-nav a[href="/"]'
        );
        if (firstLink && window.location.pathname === "/") {
          firstLink.classList.add("active");
        }

        // Attach scroll event listener
        window.addEventListener("scroll", onScroll, { passive: true });

        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", function (e: Event) {
            e.preventDefault();
            const href = (e.currentTarget as HTMLAnchorElement).getAttribute("href");
            if (href) {
              const target = document.querySelector(href);
              if (target) {
                target.scrollIntoView({
                  behavior: "smooth",
                });
              }
            }
          });
        });
      });
    </script>
  </body>
</html>
